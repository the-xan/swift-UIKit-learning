// lesson 16 -> Methods
// –ú–µ—Ç–æ–¥—ã –º–æ–≥—É—Ç –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∞—Ç—å  —Ç–∏–ø–∞–º - –∫–ª–∞—Å—Å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ
struct Point {
    var x : Int
    var y : Int
    
    //–í –º–µ—Ç–æ–¥–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –∞ —Å–ª–µ–¥—É—é—â–∏–µ - –≥–ª–æ–±–∞–ª—å–Ω–æ
    // mutating - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –Ω–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ (–≤ enum –∏ struct)
    
    mutating func moveByX(_ x: Int, andY y: Int) {
        //self - –Ω–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "—Å–µ–±—è" —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç —Å–∞–º —ç–∫–∑–µ–º–ª—è—Ä –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª –≤—ã–∑–≤–∞–Ω —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        self.x += x
        self.y += y
    }
    
    // –≤ mutating –º–µ—Ç–æ–¥–∞—Ö –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—Å—è —Å–∞–º self
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ Point
    mutating func moveBy(byX x: Int, andY y: Int) {
        self = Point(x: self.x + x, y: self.y + y)
    }
    
}


func move(point: inout Point, byX x: Int, andY y: Int) -> Point {
    point.x += x
    point.y += y
    return point
}


var p = Point(x: 1, y: 1)

//move(point: &p, byX: 2, andY: 4)
p = move(point: &p, byX: 2, andY: 4)

p.moveByX(5, andY: 7)
print(p)

p.moveBy(byX: 1, andY: 1)
print(p)


enum Color {
    
    // —Ä–∞–Ω–µ–µ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø–µ—Ä—Ç–∏ - –º–æ–∂–µ–º —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–æ–¥–µ
    static func numberOfElements() -> Int {
       return 2
    }
    
    case White
    case Black
    
    //–ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø Color, —Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Ç–∏–ø–µ –≤–æ—Ç —Ç–∞–∫ - color.invert().printColor()
    mutating func invert() -> Color {
        if self == .White {
            self = .Black
        } else {
            self = .White
        }
        self.printText()
        return self
     //   self = (self == .White) ? .Black : .White
    }
    
    func printColor() {
        if self == .White {
            print("White")
        } else {
            print("Black")
        }
    }
    
    func printText() {
        print("enum")
    }
}

var color = Color.White
color
color.invert()
color.printColor()

//–ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø Color, —Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –≤ —Ç–∏–ø–µ –≤–æ—Ç —Ç–∞–∫ - color.invert().printColor()
color.invert().printColor()

Color.numberOfElements()


//Homework ->
/*
 1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
*/

/*
2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º—á–∏–∫ –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑
–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
*/

/*
3.
–°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏ —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.
*/


struct Player {
    
    var positionX : Int {
        didSet {
            if positionX > Room.height || positionX <= 0 {
                positionX = oldValue
            }
        }
    }
    
    var positionY : Int {
        didSet {
            if positionY > Room.width || positionY <= 0 {
                positionY = oldValue
            }
        }
    }
    
    mutating func moveTo(direction: Direction) -> Player {
        switch direction {
        case .Right:
            self.positionY += 1
            break
        case .Left:
            self.positionY -= 1
            break
        case .Down:
            self.positionX += 1
            break
        case .Up:
            self.positionX -= 1
            break
        }
        return self
    }
}

struct Box {
    
    var positionX : Int {
        didSet {
            if positionX > Room.height || positionX <= 0 {
                positionX = oldValue
            }
        }
    }
    
    var positionY : Int {
        didSet {
            if positionY > Room.width || positionY <= 0 {
                positionY = oldValue
            }
        }
    }
    
    mutating func moveTo(direction: Direction) -> Box {
        switch direction {
        case .Right:
            self.positionY += 1
            break
        case .Left:
            self.positionY -= 1
            break
        case .Down:
            self.positionX += 1
            break
        case .Up:
            self.positionX -= 1
            break
        }
        return self
    }
}

enum Objects : String {
    case Player = "üë®‚Äçüéì"
    case Box = "üìï"
    case EmptyField = "‚¨ú"
}

enum Direction {
    case Up
    case Down
    case Left
    case Right
}

struct Room {
    static let width = 8
    static let height = 8
    
    var player : Player
    var box : Box
    
    func printRoom() {
        for byX in 1...Room.width {
            var row = ""
            for byY in 1...Room.width {
                switch (byX, byY) {
                case (player.positionX, player.positionY):
                    row += Objects.Player.rawValue
                    break
                case (box.positionX, box.positionY):
                    row += Objects.Box.rawValue
                    break
                default:
                    row += Objects.EmptyField.rawValue
                }
            }
            print(row)
        }
        print(" ")
    }
    
    init(player: Player, box: Box) {
        self.box = box
        self.player = player
    }
}


var newPlayer = Player(positionX: 1, positionY: 1)
var box = Box(positionX: 5, positionY: 7)
var room = Room(player: newPlayer, box: box)

newPlayer.moveTo(direction: .Down)
newPlayer.positionX
newPlayer.positionY
room.printRoom()




